name: Build - Linux

on:
  workflow_dispatch:
  # push:
  #   tags:
  #     - v*

env:
  ACTIONS_ALLOW_UNSECURE_COMMANDS: true

jobs:
  build-linux:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [18]
        arch: [amd64, arm64, arm]
        platform: [debian]
        include:
          # Set baselines per platform
          - triple: "linux-gnu"
            platform: debian
            version: bullseye
          # Set baselines per architecture
          - triple_arch: x86_64
            node_arch: x64
            arch: amd64
          - triple_arch: armv7
            node_arch: arm
            triple_postfix: eabihf
            arch: arm
            flags: -march=armv7-a -mfpu=neon-vfpv4 -mfloat-abi=hard -fPIC
          - triple_arch: aarch64
            node_arch: arm64
            arch: arm64
            flags: -march=armv8-a -fPIC
          # Set edge case overrides for specific platform + architecture
          # also define gcc commands for each architecture
          - arch: amd64
            platform: debian
            gcc_install: gcc g++
            gcc: gcc
            gxx: g++
          - arch: arm64
            platform: debian
            gcc_install: gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
            gcc: aarch64-linux-gnu-gcc
            gxx: aarch64-linux-gnu-g++
          # debian uses the triple `arm-linux-gnueabihf` instead of alpine's `armv7-alpine-linux-musleabihf`
          # because of this, we explicitly override triple_arch for debian arm
          - triple_arch: arm
            arch: arm
            platform: debian
            gcc_install: gcc-arm-linux-gnueabihf g++-arm-linux-gnueabihf
            gcc: arm-linux-gnueabihf-gcc
            gxx: arm-linux-gnueabihf-g++

    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
      - name: Install node dependencies
        run: npm install --ignore-scripts
        env:
          CI: true
      - if: matrix.arch != 'amd64'
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: ${{ matrix.arch }}
      - name: Install system dependencies
        run: |
          sudo apt update
          sudo apt install -y podman
      - name: List installed libc on host system
        run: apt list --installed | grep libc6-dev

      - name: Prepare build container
        run: sudo podman build --isolation=chroot -t ndc-buildroot:${{ matrix.platform }}-${{ matrix.arch }} ./build-containers --file Dockerfile.${{ matrix.platform }} --platform linux/${{ matrix.arch }} --build-arg="version=${{ matrix.version }}" --build-arg="node_version=${{ matrix.node-version }}" --build-arg="gcc_install=${{ matrix.gcc_install }}"

      - name: Build
        run: |
          sudo podman run --rm \
            -e TRIPLE=${{ matrix.triple_arch }}-${{ matrix.triple }}${{ matrix.triple_postfix }} \
            -e COMPILER_FLAGS="${{ matrix.flags }}" \
            -e LIBC=${{ matrix.libc }} \
            -e GCC=${{ matrix.gcc }} \
            -e GXX=${{ matrix.gxx }} \
            -e CI=true \
            -v ${{ github.workspace }}:/usr/app \
            --platform linux/${{ matrix.arch }} \
            -w /usr/app \
            ndc-buildroot:${{ matrix.platform }}-${{ matrix.arch }} \
            node_modules/.bin/prebuild --arch ${{ matrix.node_arch }} -r napi --backend cmake-js -- --CDCMAKE_TOOLCHAIN_FILE:FILEPATH=./cmake/toolchain/ci.cmake
      - name: Test
        run: sudo podman run --rm -v ${{ github.workspace }}:/usr/app/ -e CI=true --platform linux/${{ matrix.arch }} -t ndc-buildroot:${{ matrix.platform }}-${{ matrix.arch }} npm run test
      - name: Upload
        run: sudo --preserve-env=CI,LIBC node_modules/.bin/prebuild --arch ${{ matrix.node_arch }} -r napi --upload -u ${{ secrets.GITHUB_TOKEN }}
        env:
          LIBC: ${{ matrix.libc }}
          CI: true
